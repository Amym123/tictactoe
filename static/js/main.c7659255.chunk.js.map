{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","_Users_amymao_LocalDocs_tictactoe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_amymao_LocalDocs_tictactoe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_amymao_LocalDocs_tictactoe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","xIsNext","length","slice","calculateWinner","setState","concat","status","_this3","current","winner","moves","map","step","move","desc","key","jumpTo","handleClick","lines","_lines$i","_Users_amymao_LocalDocs_tictactoe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7659255.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// class Square extends React.Component {\n//   // constructor to initialize state\n//   // in javascript classes, always call super when defining \"constructor\" of a subclass\n//   // all react component classes that have a \"constructor\" sthould start it with a \"super(props)\" call.\n//     // constructor(props){\n//     //   super(props);\n//     //   this.state = {  //Square no longer keeps track of game's state\n//     //     value: null,\n//     //   };\n//     // React components can use state to remember things. private to defined component.\n//     // store current value of Square in \"this.state\", change it when Square is clicked.\n//\n//   render() {\n//     return (\n//       // <button className=\"square\" onClick={function() {alert('click');}}>\n//       // arrow function syntax for event handlers\n//       // onClick={() => alert('click')} : alert when a square is clicked\n//         // <button\n//         //   className=\"square\"\n//         //   onClick={() => alert('click')}>\n//         //   {this.props.value}\n//         // </button>\n//         // passes a prop from a parent Board component to a child Square component\n//\n//       // displays the current state's value when clicked.\n//       // onClick={() => this.setState({value: 'X'})}>: tells react to re-render square whenever its button\n//       // is clicked. after update, square's this.state.value = 'X'.\n//\n//       // ** when setState is called in a component, react automatically updates the child components inside of it too\n//         // <button\n//         //   className=\"square\"\n//         //   onClick={() => this.setState({value: 'X'})}>\n//         //   {this.state.value}\n//         // </button>\n//\n//       // passing down value and onlick from Board to Square\n//       <button\n//         className=\"square\"\n//         onClick={() => this.props.onClick()}\n//         >\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\n// replaced square class with square function\n// function components are simpler to write components containing only a render method without its own state.\n// takes props and returns what should be rendered.\n\n// In a class, use arrow function to access correct \"this\" value, but not in function component\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n    {props.value}\n    </button>\n  );\n}\n\n\nclass Board extends React.Component {\n// lifting state into a parent component: when components are refactored.\n// to collect data from multiple children, or two children communicate with\n// each other: declare shared state in parent component.\n// parent component can pass state back down to the children via props.\n\n// lifted to Game component to display all past histories\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     squares: Array(9).fill(null),\n  //     xIsNext: true,\n  //   };\n  // }\n\n  // handleClick(i) {\n  //   const squares = this.state.squares.slice();\n  //   // .slice() creates a copy. in this case, a copy of the squares Array\n  //   // two approaches to changing data:\n  //   //  - mutate data by directly changing the data's values\n  //   //  - replace data with a new copy which has desired changes\n  //   //    - immutability makes complex features much easier to make. keep previous versions, and reuse\n  //   //    - easier to detect changes\n  //   //    - build pure components in React. immutable data can easily determine if changes have been made\n  //   //      which helps to determine when component needs re-rendering\n  //   //      https://reactjs.org/docs/optimizing-performance.html#examples\n  //\n  //   if (calculateWinner(squares) || squares[i]) {\n  //     return;\n  //   }\n  //\n  //   // squares[i] = 'X';\n  //   squares[i] = this.state.xIsNext ? 'X' : 'O';\n  //   this.setState({\n  //     squares: squares,\n  //     xIsNext: !this.state.xIsNext,\n  //   });\n  // }\n\n  renderSquare(i) {\n    // used prop to make board instruct each individual Square about its current value\n    // pass down a function from board to square to maintain board's state's privacy\n    return (\n      <Square\n      value={this.props.squares[i]}\n      onClick={() => this.props.onClick(i)}\n    />\n  );\n  }\n\n  render() {\n    // const status = 'Next player: X';\n    // const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\n    // // because game component is now rendering the game's status\n    // const winner = calculateWinner(this.state.squares);\n    // let status;\n    // if (winner) {\n    //   status = 'Winner: ' + winner;\n    // } else {\n    //   status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    // }\n\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  // set up initial state of Game component\n  constructor(props) {\n    super(props);\n    // store previous square arrays in history array - all board states\n    // place history in top-level because we need access to the history to display list of past moves\n    //  - can remove the squares state from Board component (Board to Game component lift up)\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    // cannot mutate squares array to make time travel.\n    // use slice to create new copy of squares array after every move, and make it immutable.\n    //  store every past version of the squares array in history array\n\n    // history in Game component -> remove squares state from its child Board.\n\n  // update render in Game to use most recent history entry to produce game's status\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n\n    // react elements are first-class JavaScript objects so they can be passed around in applications\n    // use array of react elements to render multiple items.\n      //map() is used for mapping data to other data, can be used to map history of moves\n    const moves = history.map((step, move) => {\n      const desc = move ?\n      'Go to move #' + move :\n      'Go to game start';\n      return (\n        // key: when element is created, React extracts key property and stores key directly on the returned element\n        //      cannot be referenced with this.props.key\n        //      React automatically decides which component to update using the key\n        //      component cannot inquire about its key\n        // assign proper keys when building dynamic lists!\n        // no key: warning from React, and use array index as key by default -> bad when re-ordering list's items/insert/delete\n        // only need to unique between components and siblings\n        <li key = {move}>\n        <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner!: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}
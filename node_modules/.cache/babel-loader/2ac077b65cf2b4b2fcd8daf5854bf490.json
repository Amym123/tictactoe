{"ast":null,"code":"import _slicedToArray from \"/Users/amymao/LocalDocs/tictactoe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/amymao/LocalDocs/tictactoe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/amymao/LocalDocs/tictactoe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/amymao/LocalDocs/tictactoe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/amymao/LocalDocs/tictactoe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/amymao/LocalDocs/tictactoe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/amymao/LocalDocs/tictactoe/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // class Square extends React.Component {\n//   // constructor to initialize state\n//   // in javascript classes, always call super when defining \"constructor\" of a subclass\n//   // all react component classes that have a \"constructor\" sthould start it with a \"super(props)\" call.\n//     // constructor(props){\n//     //   super(props);\n//     //   this.state = {  //Square no longer keeps track of game's state\n//     //     value: null,\n//     //   };\n//     // React components can use state to remember things. private to defined component.\n//     // store current value of Square in \"this.state\", change it when Square is clicked.\n//\n//   render() {\n//     return (\n//       // <button className=\"square\" onClick={function() {alert('click');}}>\n//       // arrow function syntax for event handlers\n//       // onClick={() => alert('click')} : alert when a square is clicked\n//         // <button\n//         //   className=\"square\"\n//         //   onClick={() => alert('click')}>\n//         //   {this.props.value}\n//         // </button>\n//         // passes a prop from a parent Board component to a child Square component\n//\n//       // displays the current state's value when clicked.\n//       // onClick={() => this.setState({value: 'X'})}>: tells react to re-render square whenever its button\n//       // is clicked. after update, square's this.state.value = 'X'.\n//\n//       // ** when setState is called in a component, react automatically updates the child components inside of it too\n//         // <button\n//         //   className=\"square\"\n//         //   onClick={() => this.setState({value: 'X'})}>\n//         //   {this.state.value}\n//         // </button>\n//\n//       // passing down value and onlick from Board to Square\n//       <button\n//         className=\"square\"\n//         onClick={() => this.props.onClick()}\n//         >\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n// replaced square class with square function\n// function components are simpler to write components containing only a render method without its own state.\n// takes props and returns what should be rendered.\n// In a class, use arrow function to access correct \"this\" value, but not in function component\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, props.value);\n}\n\nvar Board =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Board, _React$Component);\n\n  // lifting state into a parent component: when components are refactored.\n  // to collect data from multiple children, or two children communicate with\n  // each other: declare shared state in parent component.\n  // parent component can pass state back down to the children via props.\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"handleClick\",\n    value: function handleClick(i) {\n      var squares = this.state.squares.slice(); // .slice() creates a copy. in this case, a copy of the squares Array\n      // two approaches to changing data:\n      //  - mutate data by directly changing the data's values\n      //  - replace data with a new copy which has desired changes\n      //    - immutability makes complex features much easier to make. keep previous versions, and reuse\n      //    - easier to detect changes\n      //    - build pure components in React. immutable data can easily determine if changes have been made\n      //      which helps to determine when component needs re-rendering\n      //      https://reactjs.org/docs/optimizing-performance.html#examples\n\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n      } // squares[i] = 'X';\n\n\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n        squares: squares,\n        xIsNext: !this.state.xIsNext\n      });\n    }\n  }, {\n    key: \"renderSquare\",\n    value: function renderSquare(i) {\n      var _this2 = this;\n\n      // used prop to make board instruct each individual Square about its current value\n      // pass down a function from board to square to maintain board's state's privacy\n      return React.createElement(Square, {\n        value: this.state.squares[i],\n        onClick: function onClick() {\n          return _this2.handleClick(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // const status = 'Next player: X';\n      // const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      var winner = calculateWinner(this.state.squares);\n      var status;\n\n      if (winner) {\n        status = 'Winner: ' + winner;\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, status), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n    }\n  }]);\n\n  return Board;\n}(React.Component);\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Game, _React$Component2);\n\n  function Game() {\n    _classCallCheck(this, Game);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Game).apply(this, arguments));\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"game-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Board, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"game-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Game;\n}(React.Component); // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 166\n  },\n  __self: this\n}), document.getElementById('root'));\n\nfunction calculateWinner(squares) {\n  var lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (var i = 0; i < lines.length; i++) {\n    var _lines$i = _slicedToArray(lines[i], 3),\n        a = _lines$i[0],\n        b = _lines$i[1],\n        c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/amymao/LocalDocs/tictactoe/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","state","squares","Array","fill","xIsNext","i","slice","calculateWinner","setState","handleClick","winner","status","renderSquare","Component","Game","render","document","getElementById","lines","length","a","b","c"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// class Square extends React.Component {\n//   // constructor to initialize state\n//   // in javascript classes, always call super when defining \"constructor\" of a subclass\n//   // all react component classes that have a \"constructor\" sthould start it with a \"super(props)\" call.\n//     // constructor(props){\n//     //   super(props);\n//     //   this.state = {  //Square no longer keeps track of game's state\n//     //     value: null,\n//     //   };\n//     // React components can use state to remember things. private to defined component.\n//     // store current value of Square in \"this.state\", change it when Square is clicked.\n//\n//   render() {\n//     return (\n//       // <button className=\"square\" onClick={function() {alert('click');}}>\n//       // arrow function syntax for event handlers\n//       // onClick={() => alert('click')} : alert when a square is clicked\n//         // <button\n//         //   className=\"square\"\n//         //   onClick={() => alert('click')}>\n//         //   {this.props.value}\n//         // </button>\n//         // passes a prop from a parent Board component to a child Square component\n//\n//       // displays the current state's value when clicked.\n//       // onClick={() => this.setState({value: 'X'})}>: tells react to re-render square whenever its button\n//       // is clicked. after update, square's this.state.value = 'X'.\n//\n//       // ** when setState is called in a component, react automatically updates the child components inside of it too\n//         // <button\n//         //   className=\"square\"\n//         //   onClick={() => this.setState({value: 'X'})}>\n//         //   {this.state.value}\n//         // </button>\n//\n//       // passing down value and onlick from Board to Square\n//       <button\n//         className=\"square\"\n//         onClick={() => this.props.onClick()}\n//         >\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n\n// replaced square class with square function\n// function components are simpler to write components containing only a render method without its own state.\n// takes props and returns what should be rendered.\n\n// In a class, use arrow function to access correct \"this\" value, but not in function component\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n    {props.value}\n    </button>\n  );\n}\n\n\nclass Board extends React.Component {\n// lifting state into a parent component: when components are refactored.\n// to collect data from multiple children, or two children communicate with\n// each other: declare shared state in parent component.\n// parent component can pass state back down to the children via props.\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    // .slice() creates a copy. in this case, a copy of the squares Array\n    // two approaches to changing data:\n    //  - mutate data by directly changing the data's values\n    //  - replace data with a new copy which has desired changes\n    //    - immutability makes complex features much easier to make. keep previous versions, and reuse\n    //    - easier to detect changes\n    //    - build pure components in React. immutable data can easily determine if changes have been made\n    //      which helps to determine when component needs re-rendering\n    //      https://reactjs.org/docs/optimizing-performance.html#examples\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    // squares[i] = 'X';\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  renderSquare(i) {\n    // used prop to make board instruct each individual Square about its current value\n    // pass down a function from board to square to maintain board's state's privacy\n    return <Square\n      value={this.state.squares[i]}\n      onClick={() => this.handleClick(i)}\n    />;\n  }\n\n  render() {\n    // const status = 'Next player: X';\n    // const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}